snippet   unittest
abbr      import unittest...
prev_word '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	import unittest
	${1:from app import target_module}

	class Test${2:TargetClassName}(unittest.TestCase):
		def setUp(self):
			pass

		def tearDown(self):
			pass

		def test_method(self):
			${3:pass}
			self.assertEqual(1, 1)

	if __name__ == '__main__':
		unittest.main()

snippet     flaskstaticweb
abbr        from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	from flask import Flask
	app = Flask(__name__)
	
	@app.route('/', defaults={"filename":"index.html"})
	@app.route('/<path:filename>')
	def page(filename):
		return app.send_static_file(filename)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 flaskbaseweb
abbr		from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from flask import (Flask, request, session, g, redirect,
	                   url_for, render_template, flash,
	                   send_from_directory, abort,
	                   render_template, flash, send_from_directory,
	                   render_template_string)
	
	app = Flask(__name__)
	
	tmp_index="""
	<html><head></head><body>{{ message }}</body></html>
	"""
	
	@app.route('/')
	def index():
		message = "hello world!" 
		return render_template_string(tmp_index, message=message)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 route
abbr		from flask ...
prev_word   '^'
	@app.route('${1:route}')
	def ${2:name}(${3:args}):
		${4:pass}

snippet	 doctest
abbr		import doctest...
prev_word   '^'
	if __name__ == '__main__':
		import doctest
		doctest.testmod(optionflags = (doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS))


snippet	 coding
abbr		# -*- coding...
prev_word   '^'
	# -*- coding: utf-8 -*-

snippet	 moduledoc
abbr		package.module...
prev_word   '^'
	"""
		${1:package.module}
		~~~~~~~~~~~~~~~~~~~
	
		${2:A brief description goes here.}
	
		:copyright: (c) 2012 by Daisuke Igarashi.
		:license: ${3:BSD}, see LICENSE for more details.
	"""
	${4}


snippet     prop
abbr        property ...
prev_word   '^'
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}

"snippet     s.
"abbr        self. ...
"prev_word   '^'
"	self.${1}


snippet     testm
abbr        def test_...
prev_word   '^'
	def test_${1:method_name}(self):
		${2:pass}
		self.assertEqual(
                

# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet super
	super(${1}, self).__init__(${2})

snippet pyfile
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	
	${1}
	
	# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

snippet im
	import ${1:module}

snippet fr
	from ${1:module} import ${2:module}

snippet param
        :param ${1:param_name}: ${2:description}

snippet meth
        :meth:`${1:method_name}` ${2}

snippet comp
	[ ${1} for ${2} in ${3} ]
	${4}

snippet wh
	while ${1:condition}:
		${2:# code...}

snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}

snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}

snippet try 
abbr    Try/Except 
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}

snippet trye
abbr    Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}

snippet tryf
abbr    Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}

snippet tryef
abbr    Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}

