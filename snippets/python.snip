snippet   unittest
abbr      import unittest...
prev_word '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	import unittest
	${1:from app import target_module}

	class Test${2:TargetClassName}(unittest.TestCase):
		def setUp(self):
			pass

		def tearDown(self):
			pass

		def test_method(self):
			${3:pass}
			unittest.assertEqual(1, 1)

	if __name__ == '__main__':
		unittest.main()

snippet     flaskstaticweb
abbr        from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	from flask import Flask
	app = Flask(__name__)
	
	@app.route('/', defaults={"filename":"index.html"})
	@app.route('/<path:filename>')
	def page(filename):
		return app.send_static_file(filename)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 flaskbaseweb
abbr		from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from flask import Flask, request, session, g, redirect, url_for, \
					  abort, render_template, flash, send_from_directory, \
					  render_template_string

	app = Flask(__name__)

	tmp_index="""
	<html><head></head><body>{{ message }}</body></html>
	"""
	
	@app.route('/')
	def index():
		message = "hello world!" 
		return render_template_string(tmp_index, message=message)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 route
abbr		from flask ...
prev_word   '^'
	@app.route('${1:route}')
	def ${2:name}(${3:args}):
		${4:pass}

snippet	 doctest
abbr		import doctest...
prev_word   '^'
	if __name__ == '__main__':
		import doctest
		doctest.testmod(optionflags = (doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS))


snippet	 coding
abbr		# -*- coding...
prev_word   '^'
	# -*- coding: utf-8 -*-


snippet     prop
abbr        property ...
prev_word   '^'
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}


snippet     s
abbr        self. ...
prev_word   '^'
	self.${1}


snippet     testm
abbr        def test_...
prev_word   '^'
	def test_${1:method_name}(self):
		"""${2:method documentation}"""
		${3:pass}



