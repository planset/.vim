snippet   pytestm
	def test_${1:method}(self${2:args}):
		assert ${3:expression}

snippet   pytestarg
	def pytest_funcarg__${1:argname}(self):
		return ${2:value}


snippet   unittest
abbr      import unittest...
prev_word '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	import unittest
	${1:from app import target_module}

	class Test${2:TargetClassName}(unittest.TestCase):
		def setUp(self):
			pass

		def tearDown(self):
			pass

		def test_method(self):
			${3:pass}
			self.assertEqual(1, 1)

	if __name__ == '__main__':
		unittest.main()

snippet     flaskstaticweb
abbr        from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	from flask import Flask
	app = Flask(__name__)
	
	@app.route('/', defaults={"filename":"index.html"})
	@app.route('/<path:filename>')
	def page(filename):
		return app.send_static_file(filename)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 flaskbaseweb
abbr		from flask ...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from flask import (Flask, request, session, g, redirect,
	                   url_for, render_template, flash,
	                   send_from_directory, abort,
	                   render_template, flash, send_from_directory,
	                   render_template_string)
	
	app = Flask(__name__)
	
	tmp_index="""
	<html><head></head><body>{{ message }}</body></html>
	"""
	
	@app.route('/')
	def index():
		message = "hello world!" 
		return render_template_string(tmp_index, message=message)

	if __name__ == '__main__':
		app.run(host="0.0.0.0", debug=True)

snippet	 route
abbr		from flask ...
prev_word   '^'
	@app.route('${1:route}')
	def ${2:name}(${3:args}):
		${4:pass}

snippet	 doctest
abbr		import doctest...
prev_word   '^'
	if __name__ == '__main__':
		import doctest
		doctest.testmod(optionflags = (doctest.NORMALIZE_WHITESPACE | doctest.ELLIPSIS))


snippet	 coding
abbr		# -*- coding...
prev_word   '^'
	# -*- coding: utf-8 -*-

snippet	 moduledoc
abbr		package.module...
prev_word   '^'
	"""
		${1:package.module}
		~~~~~~~~~~~~~~~~~~~
	
		${2:A brief description goes here.}
	
		:copyright: (c) 2012 by Daisuke Igarashi.
		:license: ${3:BSD}, see LICENSE for more details.
	"""
	${4}


snippet     prop
abbr        property ...
prev_word   '^'
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}


snippet     testm
abbr        def test_...
prev_word   '^'
	def test_${1:method_name}(self):
		${2:pass}
		self.assertEqual(
               


# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet super
	super(${1}, self).__init__(${2})

snippet pyfile
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	
	${1}
	

snippet im
	import ${1:module}

snippet fr
	from ${1:module} import ${2:module}

snippet param
        :param ${1:param_name}: ${2:description}

snippet meth
        :meth:`${1:method_name}` ${2}

snippet comp
	[ ${1} for ${2} in ${3} ]
	${4}

snippet wh
	while ${1:condition}:
		${2:# code...}

snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}

snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}

snippet try 
abbr    Try/Except 
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}

snippet trye
abbr    Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}

snippet tryf
abbr    Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}

snippet tryef
abbr    Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}

snippet	 flaskhelloworld
abbr		flask hello world...
prev_word   '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	from flask import Flask
	
	app = Flask(__name__)
	
	@app.route('/')
	def index():
		return 'Hello world!'

	if __name__ == '__main__':
		app.run(host='0.0.0.0', debug=True)

snippet	flaskmanage
abbr		flask hello world...
prev_word   '^'
	from __future__ import print_function
	from flaskext_script import Manager
	from ${1:appname} import app, db

	manager = Manager(app)

	@manager.command
	def init_db():
	    db.create_all()

	if __name__ == '__main__':
	    manager.run()

snippet   pytest
abbr      import pytest...
prev_word '^'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

	import pytest
	${1:from app import target_module}

	class Test${2:TargetClassName}(object):
		def test_method(self):
			${3:pass}
			assert 1 == 1

	if __name__ == '__main__':
		pytest.main()

snippet subprocess
abbr    subprocess
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	import unittest
	import os
	import subprocess
	import logging
	import signal
	import random
	
	#from eventlet import greenthread
	
	LOG = logging
	
	def _subprocess_setup():
	    # Python installs a SIGPIPE handler by default. This is usually not what
	    # non-Python subprocesses expect.
	    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
	
	
	def execute(*cmd, **kwargs):
	    """Helper method to execute command with optional retry.
	
	    If you add a run_as_root=True command, don't forget to add the
	    corresponding filter to etc/nova/rootwrap.d !
	
	    :param cmd:                Passed to subprocess.Popen.
	    :param process_input:      Send to opened process.
	    :param check_exit_code:    Single bool, int, or list of allowed exit
	                               codes.  Defaults to [0].  Raise
	                               exception.ProcessExecutionError unless
	                               program exits with one of these code.
	    :param delay_on_retry:     True | False. Defaults to True. If set to
	                               True, wait a short amount of time
	                               before retrying.
	    :param attempts:           How many times to retry cmd.
	    :param run_as_root:        True | False. Defaults to False. If set to True,
	                               the command is run with rootwrap.
	
	    :raises exception.NovaException: on receiving unknown arguments
	    :raises exception.ProcessExecutionError:
	
	    :returns: a tuple, (stdout, stderr) from the spawned process, or None if
	             the command fails.
	    """
	    process_input = kwargs.pop('process_input', None)
	    check_exit_code = kwargs.pop('check_exit_code', [0])
	    ignore_exit_code = False
	    if isinstance(check_exit_code, bool):
	        ignore_exit_code = not check_exit_code
	        check_exit_code = [0]
	    elif isinstance(check_exit_code, int):
	        check_exit_code = [check_exit_code]
	    delay_on_retry = kwargs.pop('delay_on_retry', True)
	    attempts = kwargs.pop('attempts', 1)
	    run_as_root = kwargs.pop('run_as_root', False)
	    shell = kwargs.pop('shell', False)
	
	    if len(kwargs):
	        raise Exception('Got unknown keyword args '
	                        'to utils.execute: %r' % kwargs)
	
	    if run_as_root and os.geteuid() != 0:
	        cmd = ['sudo'] + list(cmd)
	
	    cmd = map(str, cmd)
	
	    while attempts > 0:
	        attempts -= 1
	        try:
	            LOG.debug('Running cmd (subprocess): %s' % ' '.join(cmd))
	            _PIPE = subprocess.PIPE  # pylint: disable=E1101
	
	            if os.name == 'nt':
	                preexec_fn = None
	                close_fds = False
	            else:
	                preexec_fn = _subprocess_setup
	                close_fds = True
	
	            obj = subprocess.Popen(cmd,
	                                   stdin=_PIPE,
	                                   stdout=_PIPE,
	                                   stderr=_PIPE,
	                                   close_fds=close_fds,
	                                   preexec_fn=preexec_fn,
	                                   shell=shell)
	            result = None
	            if process_input is not None:
	                result = obj.communicate(process_input)
	            else:
	                result = obj.communicate()
	            obj.stdin.close()  # pylint: disable=E1101
	            _returncode = obj.returncode  # pylint: disable=E1101
	            LOG.debug('Result was %s' % _returncode)
	            if not ignore_exit_code and _returncode not in check_exit_code:
	                (stdout, stderr) = result
	                raise Exception('Returncode is not in check_exit_code.')
	            return result
	        except Exception:
	            if not attempts:
	                raise
	            else:
	                LOG.debug('%r failed. Retrying.' % cmd)
	                #if delay_on_retry:
	                #    greenthread.sleep(random.randint(20, 200) / 100.0)
	        finally:
	            # NOTE(termie): this appears to be necessary to let the subprocess
	            #               call clean something up in between calls, without
	            #               it two execute calls in a row hangs the second one
	            #greenthread.sleep(0)
	            pass
	
	
	
	class TestSubprocess(unittest.TestCase):
	    def test_method(self):
	        ret = execute('ls', '/')
	        self.assertTrue(len(ret) > 0)
	
	if __name__ == '__main__':
	    unittest.main()

